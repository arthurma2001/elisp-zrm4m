;;; Global Hash
;;;   g-py-data (list a,..z, aa,ab,...zz)
;;;   g-py-hash[a,...,zz]
;;; 
;;; PYHashItem
;;;   ('a, (list_a, list_aa, ... list_az))
;;; 
;;; PYDataItem
;;;   list_a = ('a, flag (list ...))
;;;   list_b = ('b, flag (list ...))
;;;   list_aa = ('aa, flag (list ....))
;;;   ...
;;;   list_zz = ('zz, flag (list ....))
;;;   flag -- user = 1, system = 0

;;;   list_a = ['a, flag (list ...)]
(require 'cl)
(load-file "ama-seq.el")

(defun create-sdata (chars flag &optional alst)
  (let ((ar (make-vector 3 nil)))
    (aset ar 0 chars)
    (aset ar 1 flag)
    (aset ar 2 alst)
    ar))

(defun get-sdata-data (sdata)
  (aref sdata 2))

(defun get-sdata-flag (sdata)
  (aref sdata 1))

(defun get-sdata-py (sdata)
  (aref sdata 0))

(defun set-sdata-data (sdata alst)
  (aset sdata 2 alst))

(defun set-sdata-flag (sdata flag)
  (aset sdata 1 flag))

(defun set-sdata-py (sdata py)
  (aset sdata 0 flag))

(defun add-sdata-data (sdata alst)
  (let ((alst0 (get-sdata-data sdata)))
    (set-sdata-data sdata
                    (append alst0 alst))))

(defun remove-sdata-data (sdata alst)
  (let ((alst0 (get-sdata-data sdata)))
    (dolist (a alst)
      (setq alst0 (remove a alst0)))
    ;;(print (message "alst0 - %S" alst0))
    (set-sdata-data sdata alst0)
  ))

(defun sdata-test0 ()
  (setq tmp_a (create-sdata "a" 0 (list 3 4 5)))
  (print (message "tmp_a - %S" tmp_a))
  (print (get-sdata-data tmp_a))
  (print (get-sdata-flag tmp_a))
  (print (get-sdata-py tmp_a))
  (print (set-sdata-flag tmp_a 1))
  (print (add-sdata-data tmp_a (list 'a 'b 'c)))
  (print (message "tmp_a - %S" tmp_a))

  (remove-sdata-data tmp_a (list 3 'a))
  (print (message "tmp_a - %S" tmp_a))
  )
;;(sdata-test0)

(setq num-char 26)
(setq pydata-array-size (+ num-char 
                           (* num-char num-char)))
(defun calc-sindex (chars)
  (let ((n (length chars)) n1 n2)
    (cond ((eq n 0) nil)
          ((eq n 1) (- (aref chars 0) ?a))
          ((eq n 2) 
           (+ num-char 
              (* (- (aref chars 0) ?a) num-char)
              (- (aref chars 1) ?a)))
          )))
;;(calc-sindex "c")

(defun get-py-sdata (py-array chars)
  (let ((i (calc-sindex chars)))
    (aref py-array i)))

(defun set-py-sdata (py-array chars sdata)
  (let ((i (calc-sindex chars)))
    (aset py-array i sdata)))

(defun add-py-sdata (py-array chars alst)
  (let* ((i (calc-sindex chars))
         (sdata (aref py-array i)))
    (add-sdata-data sdata alst)))

(defun remove-py-sdata (py-array chars alst)
  (let* ((i (calc-sindex chars))
         (sdata (aref py-array i)))
    (remove-sdata-data sdata alst)))
  
(defun create-pydata ()
  (let ((data (make-vector pydata-array-size nil))
        i j k str)
    (setq k 0)
    (dotimes (i 26)
      (setq str (char-to-string (+ ?a i)))
      (aset data k (create-sdata str 0))
      (setq k (1+ k)))
    (dotimes (i 26)
      (dotimes (j 26)
        (setq str (concat (char-to-string (+ ?a i))
                          (char-to-string (+ ?a j))))
        (aset data k (create-sdata str 0))
        (setq k (1+ k))))
    data))

(defun py-sdata-test001 ()
  (let ((tmp nil))
    (setq tmp (create-pydata))
    (add-py-sdata tmp "aa" (list 3 4 5))
    (print (get-py-sdata tmp "aa"))
    (remove-py-sdata tmp "aa" (list 4))
    (print (get-py-sdata tmp "aa"))
    ;;(sdata-data tmp "aa")
    ;;(get-sdata-data tmp "aa")
    ))
;;;(py-sdata-test001)

(defun create-pyhash ()
  (make-hash-table :test 'equal)
  )
;;(create-pyhash)

(defun add-pyhash-data (pyhash chars sdata)
  (puthash chars sdata pyhash)
  )

(defun get-pyhash-data (pyhash chars)
  (gethash chars pyhash)
  )

(defun pyhash-test0 ()
  (setq tmp_h (create-pyhash))
  (print tmp_h)
  (add-pyhash-data tmp_h "aa" (list 1 2 3))
  (print (get-pyhash-data tmp_h "aa"))
  )
;;(pyhash-test0)

(defun build-pydata-sdata-ch2 (ta n ch1 ch2)
  (let (cstr alst)
    (dotimes (i n)
      (setq cstr (car (aref ta i)))
      (when (>= (length cstr) 2)
        (if (and (equal (aref cstr 0) ch1)
                 (equal (aref cstr 1) ch2))
            (setq alst (append alst (list (aref ta i)))))
        ))
    alst))

;;;("a" "按" 25478)
(defun build-pydata-sdata-ch1 (ta n ch1)
  (let (cstr alst)
    (dotimes (i n)
      (setq cstr (car (aref ta i)))
      (when (= (length cstr) 1)
        (if (equal (aref cstr 0) ch1)
            (setq alst (append alst (list (aref ta i)))))
        ))
    alst))

(defun build-pydata-sdata (ta n chars)
  (let ((nch (length chars))
        ch1 ch2 cstr alst)
    (setq ch1 (aref chars 0))
    (when (>= nch 2)
      (setq ch2 (aref chars 1))
      (setq cstr (concat (char-to-string ch1)
                         (char-to-string ch2)))
      (setq alst (build-pydata-sdata-ch2 ta n ch1 ch2))
      )
    (when (= nch 1)
      (setq cstr (char-to-string ch1))
      (setq alst (build-pydata-sdata-ch1 ta n ch1))
      )
    (create-sdata cstr 0 alst)
    ))

(defun build-pydata-array0 (fname)
  (let (ta n sdata py-array i j cstr)
    (load-file "eim-zrm4m-chars2.el")
    (setq ta eim-zrm4m-char-table2)
    (setq n (length ta))
    (setq py-array (create-pydata))

    (dotimes (i 26)
      (setq cstr (char-to-string (+ ?a i)))
      (setq sdata (build-pydata-sdata ta n cstr))
      (set-py-sdata py-array cstr sdata)
      (print cstr)
      )

    (dotimes (i 26)
      (dotimes (j 26)
        (setq cstr (concat (char-to-string (+ ?a i))
                           (char-to-string (+ ?a j))))
        (setq sdata (build-pydata-sdata ta n cstr))
        (set-py-sdata py-array cstr sdata)
        (print cstr)
        ))
    py-array
    ))

;;;("a" "按" 25478)
(defun build-pydata-array1 (fname)
  (let (ta n sdata py-array i j cstr)
    (load-file "eim-zrm4m-chars2.el")
    (setq ta eim-zrm4m-char-table2)
    (setq n (length ta))
    (setq py-array (create-pydata))

    (dotimes (i n)
      (setq cstr (py2key (car (aref ta i))))
      (add-py-sdata py-array cstr (list (aref ta i)))
    )
    py-array))

(defun py2key (chars)
  (let ((cstr (char-to-string (aref chars 0))))
    (when (>= (length chars) 2)
      (setq cstr (concat cstr (char-to-string (aref chars 1)))))
    cstr))
;;(py2key "a")

(defun py2key-eq (chars1 chars2)
  (when (eq (aref chars1 0) (aref chars2 0))
    (if (and (>= (length chars1) 2)
             (>= (length chars2) 2))
        (eq (aref chars1 1) (aref chars2 1))
      (if (and (= (length chars1) 1)
               (= (length chars2) 1))
          t))))
;;(py2key-eq "ab" "a")

(defun build-pydata-array2 (fname)
  (let (ta n sdata py-array
           cstr1 cstr2 alst)
    (load-file "eim-zrm4m-chars2.el")
    (setq ta eim-zrm4m-char-table2)
    (setq n (length ta))
    (setq py-array (create-pydata))

    (setq cstr1 (car (aref ta 0)))
    (dotimes (i n)
      (setq cstr2 (py2key (car (aref ta i))))
      (if (py2key-eq cstr1 cstr2)
          (setq alst (append alst (list (aref ta i))))
        (progn 
          (add-py-sdata py-array cstr1 alst)
          (setq cstr1 cstr2)
          ;;(print alst)
          (setq alst ()))))
    (when alst
      (add-py-sdata py-array cstr1 alst))
    py-array))

(setq *py-array* nil)
(setq *py-hash* nil)
(defun build-pydata-array ()
  (let (py-array)
    (setq py-array (build-pydata-array1 "tmp.txt"))
    (setq *py-array* py-array)
    ))

;;;  list_a = ('a, flag (list ...))
(defun build-pydata-hash ()
  (let ((n (length *py-array*)) chars sdata)
    (setq *py-hash* (create-pyhash))
    (dotimes (i n)
      (setq sdata (aref *py-array* i))
      (setq chars (aref sdata 0))
      (add-pyhash-data *py-hash* chars sdata)
      )))
;;(build-pydata-hash)

(defun build-pydata ()
  (when (not *py-array*) 
    (build-pydata-array))
  (when (not *py-hash*)
    (build-pydata-hash))
  )

(defun py-rdata-sort (alst0)
  ;;(let ((alst (copy-tree alst0)))
  (let ((alst (copy-list alst0)))
    (ama-seq-column-sort alst 2)
    ))

(defun py-rdata-sort-test0 ()
  (setq tmp_alst (list (list 'a 0 1)
                       (list 'b 0 12)
                       (list 'c 0 -5)))
  (setq tmp_blst (copy-list tmp_alst))
  ;;(setq tmp_blst (append nil tmp_alst))
  (py-rdata-sort tmp_blst)
  ;;(sort tmp_blst #'(lambda (x y) (message "%S %S" x y)))
  ;;(sort tmp_blst #'(lambda (x y) (< (nth 2 x) (nth 2 y))))
  ;;tmp_blst)
  )
;;(py-rdata-sort-test0)

(defun py-proc-ekeys (alst chars)
  (let ((n (length chars)) (n1 2) n2 blst)
    (setq n2 (- n 1))
    (setq blst (remove-if-not #'(lambda(x)
                    (setq str2 (car x))
                    (ama-strncmp chars str2 n)) alst)
                   )
    blst))

(defun py-keypress (chars0)
  (let (sdata alst chars)
    (setq chars (py2key chars0))
    (setq sdata (get-pyhash-data *py-hash* chars))

    (setq alst (aref sdata 2))
    (when (<= 2 (length chars0))
      (setq alst (py-proc-ekeys alst chars0)))
      
    (py-rdata-sort alst)
    ;;sdata
  ))

(defun build-pydata-init ()
  (build-pydata))

(defun build-pydata-test0 ()
  (build-pydata-init)
  (py-keypress "anya")
  (py-keypress "ui")
  ;;(get-py-sdata *py-array* "ad")
  ;;(get-pyhash-data *py-hash* "ad")
  )
(build-pydata-test0)

(defun zrm4m-split-py (astr)
  (let (alst py chs n olst)
    (setq alst (split-string astr))
    (when (>= (length alst) 3)
      (setq py (car alst))
      (setq chs (nth 1 alst))
      (setq n (string-to-number (nth 2 alst)))
      (setq olst (list py chs n)))
    olst))

(defun zrm4m-read-table (file)
  (let ((alst nil) (olst nil))
    (when (file-readable-p file)
      (with-temp-buffer
        (insert-file-contents file)
        (goto-char (point-min))
        (while (not (eobp))
          (setq alst (zrm4m-split-py
                      (buffer-substring-no-properties 
                       (line-beginning-position)
                       (line-end-position))))
          (when alst
            (setq olst (append olst (list alst))))
         (forward-line))))
    olst))
;;(zrm4m-read-table  "/vd0/home/ama/emacs/viogus-eim-5994240/tmp001.txt")

(defun zrm4m-process-table (file)
  (let ((alst nil) n)
    (setq alst (zrm4m-read-table file))
    (setq n (length alst))
    (setq py-array (create-pydata))
    (dolist (a alst)
      (setq cstr (py2key (car a)))
      (add-py-sdata py-array cstr (list a))
      )
    py-array))
;;(zrm4m-process-table "/vd0/home/ama/emacs/viogus-eim-5994240/tmp001.txt")
